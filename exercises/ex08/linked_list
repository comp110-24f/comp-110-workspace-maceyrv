"""Linked List Exercise!"""

from __future__ import annotations

__author__: str = "730715418"


class Node:
    value: int
    next: Node | None

    def __init__(self, value: int, next: Node | None):
        """Initialize a Node with a value and a reference to the next node."""
        self.value = value
        self.next = next


def to_str(head: Node | None) -> str:
    """Represent a Linked List as a str"""
    if head is None:
        return "None"
    else:
        rest: str = to_str(head.next)
        return f"{head.value} -> {rest}"


def last(head: Node) -> int:
    """Return last value of linked list."""
    if head.next is None:
        return head.value
    else:
        return last(head.next)


def value_at(head: Node | None, index: int) -> int:
    """Return the value at a specific index in the linked list."""
    if head is None:
        raise IndexError("Index is out of bounds on the list.")
    if index == 0:
        return head.value
    else:
        rest: int = value_at(head.next, index - 1)
        return rest


def max(head: Node | None) -> int:
    """Return the maximum value in the linked list."""
    if head is None:
        raise ValueError("Cannot call max with None.")
    if head.next is None:
        return head.value
    else:
        if head.next.value > head.value:
            head.value = head.next.value
        else:
            head.next.value = head.value
        return max(head.next)


def linkify(nodes: list[int]) -> Node | None:
    """Convert a list of integers into a linked list."""
    if len(nodes) == 0:
        return None
    else:
        head: Node = Node(nodes[0], linkify(nodes[1:]))
        return head


def scale(head: Node | None, factor: int) -> Node | None:
    """Return a new linked list scaled by a factor."""
    if head is None:
        return None
    else:
        rest: int = head.value * factor
        new_node: Node = Node(rest, scale(head.next, factor))
        return new_node


print(to_str(linkify([1, 2, 3])))
print(to_str(scale(linkify([1, 2, 3]), 2)))
courses: Node = Node(11990, Node(150, Node(1390, None)))
